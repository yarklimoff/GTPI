"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Default = void 0;
var react_1 = __importStar(require("react"));
// @ts-ignore
var Plot = __importStar(require("@observablehq/plot"));
var d3 = __importStar(require("d3"));
var PlotFigure_1 = __importDefault(require("./PlotFigure"));
exports.default = {
    title: "PlotFigure",
    component: PlotFigure_1.default,
};
var Default = function () {
    var _a = (0, react_1.useState)(), data = _a[0], setData = _a[1];
    (0, react_1.useEffect)(function () {
        d3.csv("data/aapl.csv", d3.autoType).then(function (data) {
            setData(data.slice(-120));
        });
    });
    if (!data) {
        return react_1.default.createElement("div", null, "Loading data...");
    }
    return (react_1.default.createElement(PlotFigure_1.default, { options: {
            inset: 6,
            grid: true,
            y: {
                label: "â†‘ Apple stock price ($)",
            },
            color: {
                range: ["#e41a1c", "#000000", "#4daf4a"],
            },
            marks: [
                Plot.ruleX(data, {
                    x: "Date",
                    y1: "Low",
                    y2: "High",
                }),
                Plot.ruleX(data, {
                    x: "Date",
                    y1: "Open",
                    y2: "Close",
                    stroke: function (d) {
                        return Math.sign(d.Close - d.Open);
                    },
                    strokeWidth: 4,
                    strokeLinecap: "round",
                }),
            ],
            width: 960,
        } }));
};
exports.Default = Default;
